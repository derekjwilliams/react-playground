{"ast":null,"code":"var _jsxFileName = \"/Users/jredcedar/Dev/react/react-playground/src/index.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction Square({\n  value,\n  onClick\n}) {\n  return /*#__PURE__*/_jsxDEV(\"button\", {\n    className: \"square\",\n    onClick: onClick,\n    children: value\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 8,\n    columnNumber: 5\n  }, this);\n}\n\n_c = Square;\n\nfunction Board() {\n  _s();\n\n  const [squares, setSquares] = useState(Array(9).fill(null));\n  const [isXPlayersTurn, setIsXPlayersTurn] = useState(true);\n  const [playerOneName, setPlayerOneName] = useState('Jason');\n  const [playerTwoName, setPlayerTwoName] = useState('Derek');\n\n  const gameOver = s => {\n    const isWinningCombination = line => {\n      if (line[0] !== null) {\n        return line.every(e => e === line[0]);\n      }\n\n      return false;\n    };\n\n    const winningCombinations = [[s[0], s[1], s[2]], [s[3], s[4], s[5]], [s[6], s[7], s[8]], //rows\n    [s[0], s[3], s[6]], [s[1], s[4], s[7]], [s[2], s[5], s[8]], // columns\n    [s[0], s[4], s[8]], [s[2], s[4], s[6]] // diagonals\n    ];\n    const winningPlayer = winningCombinations.findIndex(line => {\n      return isWinningCombination(line);\n    });\n\n    if (winningPlayer != -1) {\n      alert(s[winningPlayer] + ' is the winner');\n    }\n  };\n\n  function renderSquare(i) {\n    return /*#__PURE__*/_jsxDEV(Square, {\n      value: squares[i],\n      onClick: () => {\n        const nextSquares = squares.slice();\n        nextSquares[i] = isXPlayersTurn ? 'x' : 'o';\n        setIsXPlayersTurn(!isXPlayersTurn);\n        setSquares(nextSquares);\n        gameOver(nextSquares);\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 12\n    }, this);\n  }\n\n  const currentPlayer = 'Current player:' + playerOneName;\n  const nexttPlayer = 'Next player:' + playerOneName;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"status\",\n      children: status\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 68,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [renderSquare(0), renderSquare(1), renderSquare(2)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [renderSquare(3), renderSquare(4), renderSquare(5)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"board-row\",\n      children: [renderSquare(6), renderSquare(7), renderSquare(8)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 67,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Board, \"Ml7WPtgEhECLIy2F2mSD2UrHNO8=\");\n\n_c2 = Board;\n\nfunction Game() {\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"game\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-board\",\n      children: /*#__PURE__*/_jsxDEV(Board, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"game-info\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ol\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n}\n\n_c3 = Game;\nReactDOM.render( /*#__PURE__*/_jsxDEV(Game, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 103,\n  columnNumber: 3\n}, this), document.getElementById('root')); // ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n// // If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"Square\");\n$RefreshReg$(_c2, \"Board\");\n$RefreshReg$(_c3, \"Game\");","map":{"version":3,"sources":["/Users/jredcedar/Dev/react/react-playground/src/index.js"],"names":["React","useState","ReactDOM","Square","value","onClick","Board","squares","setSquares","Array","fill","isXPlayersTurn","setIsXPlayersTurn","playerOneName","setPlayerOneName","playerTwoName","setPlayerTwoName","gameOver","s","isWinningCombination","line","every","e","winningCombinations","winningPlayer","findIndex","alert","renderSquare","i","nextSquares","slice","currentPlayer","nexttPlayer","status","Game","render","document","getElementById"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,WAArB;AACA,OAAO,aAAP;;;AAEA,SAASC,MAAT,CAAgB;AAAEC,EAAAA,KAAF;AAASC,EAAAA;AAAT,CAAhB,EAAoC;AAElC,sBACE;AAAQ,IAAA,SAAS,EAAC,QAAlB;AACE,IAAA,OAAO,EAAEA,OADX;AAAA,cAGGD;AAHH;AAAA;AAAA;AAAA;AAAA,UADF;AAOD;;KATQD,M;;AAWT,SAASG,KAAT,GAAiB;AAAA;;AAEf,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBP,QAAQ,CAACQ,KAAK,CAAC,CAAD,CAAL,CAASC,IAAT,CAAc,IAAd,CAAD,CAAtC;AACA,QAAM,CAACC,cAAD,EAAkBC,iBAAlB,IAAuCX,QAAQ,CAAC,IAAD,CAArD;AAEA,QAAM,CAACY,aAAD,EAAgBC,gBAAhB,IAAoCb,QAAQ,CAAC,OAAD,CAAlD;AACA,QAAM,CAACc,aAAD,EAAgBC,gBAAhB,IAAoCf,QAAQ,CAAC,OAAD,CAAlD;;AAEA,QAAMgB,QAAQ,GAAIC,CAAD,IAAO;AACtB,UAAMC,oBAAoB,GAAIC,IAAD,IAAU;AACrC,UAAIA,IAAI,CAAC,CAAD,CAAJ,KAAY,IAAhB,EAAsB;AACpB,eAAOA,IAAI,CAACC,KAAL,CAAWC,CAAC,IAAIA,CAAC,KAAKF,IAAI,CAAC,CAAD,CAA1B,CAAP;AACD;;AACD,aAAO,KAAP;AACD,KALD;;AAMA,UAAMG,mBAAmB,GACzB,CACC,CAACL,CAAC,CAAC,CAAD,CAAF,EAAOA,CAAC,CAAC,CAAD,CAAR,EAAaA,CAAC,CAAC,CAAD,CAAd,CADD,EACqB,CAACA,CAAC,CAAC,CAAD,CAAF,EAAOA,CAAC,CAAC,CAAD,CAAR,EAAaA,CAAC,CAAC,CAAD,CAAd,CADrB,EACyC,CAACA,CAAC,CAAC,CAAD,CAAF,EAAOA,CAAC,CAAC,CAAD,CAAR,EAAaA,CAAC,CAAC,CAAD,CAAd,CADzC,EAC6D;AAC5D,KAACA,CAAC,CAAC,CAAD,CAAF,EAAOA,CAAC,CAAC,CAAD,CAAR,EAAaA,CAAC,CAAC,CAAD,CAAd,CAFD,EAEqB,CAACA,CAAC,CAAC,CAAD,CAAF,EAAOA,CAAC,CAAC,CAAD,CAAR,EAAaA,CAAC,CAAC,CAAD,CAAd,CAFrB,EAEyC,CAACA,CAAC,CAAC,CAAD,CAAF,EAAOA,CAAC,CAAC,CAAD,CAAR,EAAaA,CAAC,CAAC,CAAD,CAAd,CAFzC,EAE6D;AAC5D,KAACA,CAAC,CAAC,CAAD,CAAF,EAAOA,CAAC,CAAC,CAAD,CAAR,EAAaA,CAAC,CAAC,CAAD,CAAd,CAHD,EAGqB,CAACA,CAAC,CAAC,CAAD,CAAF,EAAOA,CAAC,CAAC,CAAD,CAAR,EAAaA,CAAC,CAAC,CAAD,CAAd,CAHrB,CAGwC;AAHxC,KADA;AAOA,UAAMM,aAAa,GAAGD,mBAAmB,CAACE,SAApB,CAA8BL,IAAI,IAAI;AAC1D,aAAOD,oBAAoB,CAACC,IAAD,CAA3B;AACD,KAFqB,CAAtB;;AAIA,QAAII,aAAa,IAAI,CAAC,CAAtB,EAAyB;AACvBE,MAAAA,KAAK,CAACR,CAAC,CAACM,aAAD,CAAD,GAAmB,gBAApB,CAAL;AACD;AACF,GArBD;;AAuBA,WAASG,YAAT,CAAsBC,CAAtB,EAAyB;AAEvB,wBAAO,QAAC,MAAD;AACL,MAAA,KAAK,EAAErB,OAAO,CAACqB,CAAD,CADT;AAEL,MAAA,OAAO,EACL,MAAM;AACJ,cAAMC,WAAW,GAAGtB,OAAO,CAACuB,KAAR,EAApB;AACAD,QAAAA,WAAW,CAACD,CAAD,CAAX,GAAiBjB,cAAc,GAAG,GAAH,GAAS,GAAxC;AACAC,QAAAA,iBAAiB,CAAC,CAACD,cAAF,CAAjB;AACAH,QAAAA,UAAU,CAACqB,WAAD,CAAV;AACAZ,QAAAA,QAAQ,CAACY,WAAD,CAAR;AACD;AATE;AAAA;AAAA;AAAA;AAAA,YAAP;AAWD;;AAED,QAAME,aAAa,GAAG,oBAAkBlB,aAAxC;AAEA,QAAMmB,WAAW,GAAG,iBAAenB,aAAnC;AAEA,sBACE;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,QAAf;AAAA,gBAAyBoB;AAAzB;AAAA;AAAA;AAAA;AAAA,YADF,eAEE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,iBACGN,YAAY,CAAC,CAAD,CADf,EAEGA,YAAY,CAAC,CAAD,CAFf,EAGGA,YAAY,CAAC,CAAD,CAHf;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF,eAOE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,iBACGA,YAAY,CAAC,CAAD,CADf,EAEGA,YAAY,CAAC,CAAD,CAFf,EAGGA,YAAY,CAAC,CAAD,CAHf;AAAA;AAAA;AAAA;AAAA;AAAA,YAPF,eAYE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,iBACGA,YAAY,CAAC,CAAD,CADf,EAEGA,YAAY,CAAC,CAAD,CAFf,EAGGA,YAAY,CAAC,CAAD,CAHf;AAAA;AAAA;AAAA;AAAA;AAAA,YAZF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAoBD;;GAtEQrB,K;;MAAAA,K;;AAwET,SAAS4B,IAAT,GAAgB;AACd,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA,4BACE;AAAK,MAAA,SAAS,EAAC,YAAf;AAAA,6BACE,QAAC,KAAD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,YADF,eAIE;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YAJF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAWD;;MAZQA,I;AAcThC,QAAQ,CAACiC,MAAT,eACE,QAAC,IAAD;AAAA;AAAA;AAAA;AAAA,QADF,EAEEC,QAAQ,CAACC,cAAT,CAAwB,MAAxB,CAFF,E,CAOA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA","sourcesContent":["import React, { useState } from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nfunction Square({ value, onClick }) {\n\n  return (\n    <button className=\"square\"\n      onClick={onClick}\n    >\n      {value}\n    </button>\n  );\n}\n\nfunction Board() {\n\n  const [squares, setSquares] = useState(Array(9).fill(null))\n  const [isXPlayersTurn , setIsXPlayersTurn] = useState(true)\n\n  const [playerOneName, setPlayerOneName] = useState('Jason')\n  const [playerTwoName, setPlayerTwoName] = useState('Derek')\n\n  const gameOver = (s) => {\n    const isWinningCombination = (line) => {\n      if (line[0] !== null) {\n        return line.every(e => e === line[0])\n      }\n      return false\n    }\n    const winningCombinations = \n    [\n     [s[0], s[1], s[2]], [s[3], s[4], s[5]], [s[6], s[7], s[8]], //rows\n     [s[0], s[3], s[6]], [s[1], s[4], s[7]], [s[2], s[5], s[8]], // columns\n     [s[0], s[4], s[8]], [s[2], s[4], s[6]] // diagonals\n   ] \n    \n    const winningPlayer = winningCombinations.findIndex(line => {\n      return isWinningCombination(line)\n    })\n\n    if (winningPlayer != -1) {\n      alert(s[winningPlayer] + ' is the winner')\n    }\n  }\n\n  function renderSquare(i) {\n    \n    return <Square\n      value={squares[i]}\n      onClick={ \n        () => {\n          const nextSquares = squares.slice()\n          nextSquares[i] = isXPlayersTurn ? 'x' : 'o'\n          setIsXPlayersTurn(!isXPlayersTurn)\n          setSquares(nextSquares)\n          gameOver(nextSquares)\n        }\n      } />;\n  }\n\n  const currentPlayer = 'Current player:'+playerOneName\n\n  const nexttPlayer = 'Next player:'+playerOneName\n\n  return (  \n    <div>\n      <div className=\"status\">{status}</div>\n      <div className=\"board-row\">\n        {renderSquare(0)}\n        {renderSquare(1)}\n        {renderSquare(2)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(3)}\n        {renderSquare(4)}\n        {renderSquare(5)}\n      </div>\n      <div className=\"board-row\">\n        {renderSquare(6)}\n        {renderSquare(7)}\n        {renderSquare(8)}\n      </div>\n    </div>\n  );\n}\n\nfunction Game() {\n  return (\n    <div className=\"game\">\n      <div className=\"game-board\">\n        <Board />\n      </div>\n      <div className=\"game-info\">\n        <div>{/* status */}</div>\n        <ol>{/* TODO */}</ol>\n      </div>\n    </div>\n  );\n}\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n\n\n// ReactDOM.render(\n//   <React.StrictMode>\n//     <App />\n//   </React.StrictMode>,\n//   document.getElementById('root')\n// );\n\n// // If you want to start measuring performance in your app, pass a function\n// // to log results (for example: reportWebVitals(console.log))\n// // or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n\n\n"]},"metadata":{},"sourceType":"module"}